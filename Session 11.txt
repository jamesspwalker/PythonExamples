PROBLEM 1
class Node:
  def __init__(self, init_data):
    self.data = init_data
    self.next = None

class Stack:
  def __init__(self):
    self.top = None    #top stores a Node
  def push(self, x):
    if self.top == None:
      self.top = Node(x)
    else:
      newnode = Node(x)
      newnode.next = self.top
      self.top = newnode
    #implement this: adds a new Node, makes top point to it,
    #old top is "saved in" the new Node's next
  def pop(self):
    if self.is_empty():
      return None
    removednode = self.top
    self.top = self.top.next
    removednode.next = None
    return removednode.data
    #implement this: makes top point to the next of the Node pointed to by top
  def peek(self):
    if self.is_empty():
      return None
    else:
      return self.top.data
    #implement this: returns the data of the Node pointed to by top
  def is_empty(self):
    if self.top == None:
      return True
    else:
      return False
    #implement this: returns True if there are no Nodes in
    #Stack, otherwise False

PROBLEM 2
class Node:
  def __init__(self, init_data):
    self.data = init_data
    self.next = None

class Stack:
  def __init__(self):
    self.top = None    #top stores a Node
  def push(self, x):
    if self.top == None:
      self.top = Node(x)
    else:
      newnode = Node(x)
      newnode.next = self.top
      self.top = newnode
  def pop(self):
    if self.is_empty():
      return None
    removednode = self.top
    self.top = self.top.next
    removednode.next = None
    return removednode.data
  def peek(self):
    if self.is_empty():
      return None
    else:
      return self.top.data
  def is_empty(self):
    if self.top == None:
      return True
    else:
      return False
    
def closed_brackets(sym):
  stacket = Stack()
  for s in sym:
    if s in ['(', '{', '[']:
      stacket.push(s)
    else:
      if stacket.peek() == '(':
        if s == ')':
          stacket.pop()
      if stacket.peek() == '[':
        if s == ']':
          stacket.pop()
      if stacket.peek() == '{':
        if s == '}':
          stacket.pop()
  if stacket.is_empty() == True:
    return True
  else:
    return False
symbol = input()
print(closed_brackets(symbol))